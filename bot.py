#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–õ–û–ö–ê–õ–¨–ù–´–ô –¢–ì-–ë–û–¢ (python-telegram-bot v20)
‚Äî –ö–æ–º–∞–Ω–¥–∞: /parse <url> <count>
‚Äî –ó–∞–ø—É—Å–∫–∞–µ—Ç avito_scraper.scrape(...) –∏ –ø—Ä–∏—Å—ã–ª–∞–µ—Ç –æ–¥–∏–Ω JSON-—Ñ–∞–π–ª

–ü–µ—Ä–µ–¥ –ø–µ—Ä–≤—ã–º –∑–∞–ø—É—Å–∫–æ–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:
  pip install python-telegram-bot==20.* playwright bs4 lxml

–ò –æ–¥–∏–Ω —Ä–∞–∑ –ø–æ—Å—Ç–∞–≤—å—Ç–µ –±—Ä–∞—É–∑–µ—Ä:
  playwright install

–ó–∞—Ç–µ–º –∑–∞–¥–∞–π—Ç–µ BOT_TOKEN —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –ò–õ–ò –≤—Å—Ç–∞–≤—å—Ç–µ –ø—Ä—è–º–æ –≤ –∫–æ–¥ –Ω–∏–∂–µ.
"""

import os
import asyncio
import logging
from pathlib import Path
from urllib.parse import urlparse

from telegram import Update, InputFile
from telegram.ext import Application, CommandHandler, ContextTypes

# –ò–º–ø–æ—Ä—Ç –Ω–∞—à–µ–≥–æ —Å–∫—Ä–∞–ø–µ—Ä–∞
import avito_scraper

# ---- –¢–æ–∫–µ–Ω –±–æ—Ç–∞ ----
BOT_TOKEN = os.getenv("BOT_TOKEN", "").strip() or "7051340892:AAFAxEGGGefLS6gHLM6uMaoQ8vKMaVXmd10"

# ---- –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (—á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å –æ—à–∏–±–∫–∏) ----
logging.basicConfig(
    format="%(asctime)s %(levelname)s %(name)s | %(message)s",
    level=logging.INFO,
)
logger = logging.getLogger("avito-bot")

def _looks_like_url(s: str) -> bool:
    try:
        u = urlparse(s)
        return bool(u.scheme and u.netloc)
    except Exception:
        return False

async def start_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –ü—Ä–∏—à–ª–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "/parse <—Å—Å—ã–ª–∫–∞_–Ω–∞_–∫–∞—Ç–µ–≥–æ—Ä–∏—é_–∏–ª–∏_–ø–æ–∏—Å–∫> <–∫–æ–ª-–≤–æ>\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "/parse https://www.avito.ru/moskva/velosipedy?cd=1 3"
    )

async def parse_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # —Ä–∞–∑–±–∏—Ä–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã: –æ–∂–∏–¥–∞–µ–º 2 ‚Äî url –∏ —á–∏—Å–ª–æ
    args = context.args
    if len(args) < 2 or not _looks_like_url(args[0]):
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /parse <url> <count>\n–ü—Ä–∏–º–µ—Ä: /parse https://www.avito.ru/moskva/velosipedy?cd=1 5")
        return
    url = args[0]
    try:
        count = int(args[1])
    except Exception:
        await update.message.reply_text("–í—Ç–æ—Ä–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü—Ä–∏–º–µ—Ä: /parse <url> 5")
        return
    count = max(1, min(count, 30))  # –Ω–∞ –ª–æ–∫–∞–ª–∫–µ –Ω–µ –∑–ª–æ—É–ø–æ—Ç—Ä–µ–±–ª—è–µ–º

    msg = await update.message.reply_text("–ó–∞–ø—É—Å–∫–∞—é —Å–±–æ—Ä‚Ä¶ –û—Ç–∫—Ä–æ–µ—Ç—Å—è –æ–∫–Ω–æ –±—Ä–∞—É–∑–µ—Ä–∞. –ï—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è ‚Äî —Ä–µ—à–∏—Ç–µ –∫–∞–ø—á—É.")
    try:
        out_path = await avito_scraper.scrape(url, count)  # –∑–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –≤ —Ç–æ–º –∂–µ loop
    except Exception as e:
        logger.exception("Scrape failed")
        await msg.edit_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ: {e}")
        return

    # —à–ª—ë–º —Ñ–∞–π–ª
    try:
        fn = Path(out_path)
        if not fn.exists():
            await msg.edit_text("–°–±–æ—Ä –∑–∞–≤–µ—Ä—à—ë–Ω, –Ω–æ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω ü§î")
            return
        await msg.edit_text("–ì–æ—Ç–æ–≤–æ! –û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª‚Ä¶")
        with fn.open("rb") as f:
            await update.message.reply_document(
                document=InputFile(f, filename=fn.name),
                caption=f"{fn.name} ‚Ä¢ {fn.stat().st_size} –±–∞–π—Ç"
            )
    finally:
        # –ù–∞ –ª–æ–∫–∞–ª–∫–µ –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å —Ñ–∞–π–ª—ã. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ ‚Äî —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ:
        # try: fn.unlink(missing_ok=True)
        # except Exception: pass
        pass

def main():
    if not BOT_TOKEN or BOT_TOKEN.startswith("PASTE_"):
        raise SystemExit("–£–∫–∞–∂–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ BOT_TOKEN –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

    app = Application.builder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start_cmd))
    app.add_handler(CommandHandler("parse", parse_cmd))

    logger.info("Bot started. Press Ctrl+C to stop.")
    app.run_polling(close_loop=False)

if __name__ == "__main__":
    main()
